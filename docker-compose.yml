services:
  jaeger:
    image: jaegertracing/jaeger:2.2.0
    container_name: jaeger
    restart: always
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - '5775:5775/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '9411:9411'
      - '16686:16686' # UI do Jaeger
      - '14268:14268' # Coletor de traces HTTP
      - '14250:14250' # Coletor gRPC
      - '6831:6831/udp' # Recebimento de spans via UDP

  # zipkin:
  #   image: openzipkin/zipkin
  #   container_name: zipkin
  #   restart: unless-stopped
  #   ports:
  #     - "9411:9411"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./.docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      # - ./.docker/prometheus.yml:/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # - '--enable-feature=otlp-write-receive'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - '3001:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    restart: always
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./.docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '1888:1888' # pprof extension
      - '13133:13133' # health_check extension
      - '4317:4317' # OTLP gRPC receiver (usado pelo OpenTelemetry SDK)
      - '4318:4318' # OTLP HTTP
      - '8888:8888' # UI do OpenTelemetry Collector
      - '9464:9464' # Exposição de métricas para Prometheus
      - '55679:55679' # zpages extension
    depends_on:
      - jaeger
    links:
      - jaeger

volumes:
  grafana-data:
  prometheus_data:
